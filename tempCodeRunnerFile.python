# Create the graph
result_dict = {}
for v in range(101):
    lst = [v+1, v+2, v+3, v+4, v+5, v+6]
    head_base = {1: 38, 4: 14, 9: 31, 17: 7, 21: 42, 28: 84, 51: 67, 54: 34, 62: 19, 64: 60, 72: 91, 80: 99, 87: 36, 93: 73, 95: 75, 98: 79}
    for key in head_base.keys():
        if key in lst:
            index = lst.index(key)
            lst[index] = head_base[key]
    result_dict[v] = [(i, 1) for i in lst if i <= 100]  # Add weight 1 to each edge

def breadthFirstSearch(graph, start, end):
    queue = [(start, [start], 0)]  # (vertex, path, dice throws)
    visited = set()

    while queue:
        vertex, path, dice = queue.pop(0)
        
        if vertex == end:
            print("Path taken:", ' -> '.join(map(str, path)))
            return dice
        
        if vertex not in visited:
            visited.add(vertex)
            for neighbor, _ in graph[vertex]:
                if neighbor not in visited:
                    new_path = path + [neighbor]
                    if neighbor in head_base and head_base[neighbor] != neighbor:
                        if neighbor > head_base[neighbor]:
                            print(f"Snake at {neighbor}, moving down to {head_base[neighbor]}")
                        else:
                            print(f"Ladder at {neighbor}, moving up to {head_base[neighbor]}")
                        new_path.append(head_base[neighbor])
                        queue.append((head_base[neighbor], new_path, dice + 1))
                    else:
                        queue.append((neighbor, new_path, dice + 1))
    
    return -1  # If end is not reachable

# Run the search
start = 0
end = 100
min_dice_throws = breadthFirstSearch(result_dict, start, end)

print(f"The minimum number of dice throws is: {min_dice_throws}")